---
import { marked } from "marked";
import RequestBody from "./RequestBody.astro";
import ResponseBody from "./ResponseBody.astro";
const {
  data,
  tags,
  data: { info },
} = Astro.props;
const urls = data.servers;
const baseUrl = urls?.[0].url || data.host;
---

<div class="pl-4 flex-1">
  <div class="sidebar h-screen overflow-y-auto scroll-smooth">
  <h1 class="font-bold text-xl my-2" id="title">
    {info.title}
    <div class="badge ml-2">
      {info.version && <span class="text-sm">v{info.version}</span>}
    </div>
  </h1>
  <div class="badge badge-lg badge-primary mb-4">
    {data.host || data.servers?.[0]?.url}
  </div>
  <div
    class="prose prose-h2:text-lg"
    set:html={info.description && marked.parse(info.description)}
  />
  <div class="divider"></div>
  {
    tags.map((tag: any) => {
      return (
        <div>
          <h1 class="uppercase">{tag.name}</h1>
          {tag.operations.map((operation: any) => {
            return (
              <div class="flex">
                <div class="flex-1">
                  <div class="font-bold text-xl" id={operation.operationId}>
                    {operation.summary}
                  </div>
                  <div class="m-4">
                    <span
                      class={`badge badge-lg uppercase mr-2 ${operation.method}`}
                    >
                      {operation.method}
                    </span>
                    <span>{operation.path}</span>
                    <div
                      class="my-4 prose"
                      set:html={
                        operation.description &&
                        marked.parse(operation.description)
                      }
                    />
                    <div>
                      {operation.parameters?.some(
                        (param) => param.in === "query"
                      ) && <h2 class="font-bold">Query Params</h2>}
                      {operation.parameters
                        ?.filter((param) => param.in === "query")
                        .map((param) => {
                          return (
                            <div class="py-2">
                              <div>
                                <span class="font-bold">{param.name}</span>{" "}
                                <span>{param.type}</span>
                                <span>{param.schema?.type}</span>
                              </div>

                              <div>{param.description}</div>
                            </div>
                          );
                        })}

                      {operation.requestBody && (
                        <h2 class="font-bold">Request</h2>
                       <RequestBody data={data} operation={operation} /> 

                      )}

                      <h2 class="font-bold">Responses</h2>
                      {operation.responses&&Object.entries(operation.responses).map(
                        ([key, value]) => {
                          return (
                            <div class="py-2">
                              <div>
                                <code>
                                  <ResponseBody
                                    data={value}
                                    operation={key}
                                  />
                                </code>
                              </div>
                            </div>
                          );
                        }
                      )}

                    </div>
                  </div>
                </div>
                <div class="flex-1">
                  <div class="card shadow-lg">
                    <div class="card-body">
                      <div>Request sample: </div>
                      <code class="text-sm ">
                        curl --request{" "}
                        <span class={operation.method}>
                          {operation.method.toUpperCase()}
                        </span>{" "}
                        --url '{baseUrl}
                        {operation.path}' --header 'ContentType:
                        application/json'
                      </code>
                    </div>
                  </div>
                </div>
              </div>
            );
          })}
          <div class="divider" />
        </div>
      );
    })
  }
  </div>
</div>

<style>
  @tailwind base;
  @tailwind components;
  @tailwind utilities;

  @layer utilities {
    .get {
      @apply text-blue-400;
    }
    .post,
    .put {
      @apply text-success;
    }
    .delete {
      @apply text-error;
    }
    .patch {
      @apply text-warning;
    }
    .options {
      @apply text-info;
    }
    .head {
      @apply text-secondary;
    }
  }
</style>
